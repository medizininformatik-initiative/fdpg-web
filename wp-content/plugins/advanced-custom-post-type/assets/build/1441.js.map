{"version":3,"file":"1441.js","mappings":"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","sources":["webpack://advanced-custom-post-type/./assets/src/App/components/pages/UserMeta/index.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport Breadcrumbs from \"../../reusable/Layout/Breadcrumbs\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport useUnsavedChangesWarning from \"../../../hooks/useUnsavedChangesWarning\";\nimport {changeCurrentAdminMenuLink, metaTitle} from \"../../../utils/misc\";\nimport {arrayMove} from \"react-sortable-hoc\";\nimport {toast} from \"react-toastify\";\nimport Spinner from \"../../reusable/Loader/Spinner\";\nimport Layout from \"../../reusable/Layout\";\nimport ActionsBar from \"../../reusable/Layout/ActionsBar\";\nimport {fetchMeta} from \"../../../redux/thunks/fetchMeta\";\nimport {metaTypes} from \"../../../constants/metaTypes\";\nimport {metaSubmit} from \"../../../redux/thunks/metaSubmit\";\nimport {deleteAllMeta} from \"../../../redux/thunks/deleteAllMeta\";\nimport {createBox, setBoxes, setStatusSaved} from \"../../../redux/actions/metaStateActions\";\nimport Meta from \"../../reusable/Meta\";\nimport Modal from \"../../reusable/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\n\nconst UserMeta = () => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {boxes, fields, values, blocks, isSaved, isValid, loading: saveLoading, errors: saveErrors, success} = useSelector(state => state.metaStateReducer);\n    const {loading, fetched} = useSelector(state => state.fetchMetaReducer);\n\n    // manage local state\n    const didMountRef = useRef(false);\n    const [Prompt, setDirty, setPristine] = useUnsavedChangesWarning();\n    const [modalVisible, setModalVisible] = useState(false);\n\n    // set page meta title\n    useEffect(() => {\n        metaTitle(`ACPT - ${useTranslation(\"User meta\")}${isSaved ? '' : '*'}`);\n        changeCurrentAdminMenuLink('#/user-meta');\n        if(!isSaved){ setDirty(); }\n    }, [isSaved]);\n\n    // fetching data and\n    // populate the UI\n    useEffect(() => {\n        dispatch(fetchMeta(metaTypes.USER));\n    }, [saveLoading]);\n\n    // sortable\n    const onSortEnd = ({oldIndex, newIndex}) => {\n        dispatch(setBoxes(arrayMove(boxes, oldIndex, newIndex)));\n    };\n\n    // handle data submit\n    const handleSubmit = () => {\n        dispatch(metaSubmit(values));\n        dispatch(setStatusSaved());\n        setPristine();\n    };\n\n    const handleDeleteAll = () => {\n        dispatch(deleteAllMeta(metaTypes.USER));\n        dispatch(setUserMetaStatusSaved());\n        setPristine();\n    };\n\n    // handle form submission outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!saveLoading){\n                if(success){\n                    setPristine();\n                    toast.success(useTranslation(\"User meta successfully saved\"));\n                }\n\n                if(saveErrors.length > 0){\n                    saveErrors.map((error) => {\n                        toast.error(error);\n                    });\n                }\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [saveLoading]);\n\n    if(loading){\n        return <Spinner />;\n    }\n\n    const renderDeleteButton = (\n        <React.Fragment>\n            <Modal title={`Confirm deleting all`} visible={modalVisible}>\n                <p>\n                    {useTranslation(\"Are you sure?\")}\n                </p>\n                <p>\n                    <a\n                        href=\"#\"\n                        className=\"acpt-btn acpt-btn-primary\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            setModalVisible(!modalVisible);\n                            handleDeleteAll();\n                        }}\n                    >\n                        {useTranslation(\"Yes\")}\n                    </a>\n                    &nbsp;\n                    <a\n                        href=\"#\"\n                        className=\"acpt-btn acpt-btn-primary-o\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            setModalVisible(!modalVisible);\n                        }}\n                    >\n                        {useTranslation(\"No\")}\n                    </a>\n                </p>\n            </Modal>\n            <button\n                onClick={(e) => {\n                    e.preventDefault();\n                    setModalVisible(true);\n                }}\n                type=\"submit\"\n                className=\"acpt-btn acpt-btn-danger\"\n            >\n                {useTranslation(\"Delete all\")}\n            </button>\n        </React.Fragment>\n    );\n\n    const buttons = (\n        <React.Fragment>\n            <button\n                onClick={ (e) => {\n                    e.preventDefault();\n                    dispatch(createBox(metaTypes.USER));\n                } }\n                className=\"acpt-btn acpt-btn-primary-o\"\n            >\n                {useTranslation(\"Add meta box\")}\n            </button>\n            {boxes.length > 0\n                ?\n                    <React.Fragment>\n                        <button\n                            disabled={!isValid}\n                            onClick={(e) => {\n                                e.preventDefault();\n                                handleSubmit();\n                            }}\n                            type=\"submit\"\n                            className=\"acpt-btn acpt-btn-primary\"\n                        >\n                            {useTranslation(\"Save\")}\n                        </button>\n                        {renderDeleteButton}\n                    </React.Fragment>\n                :\n                <React.Fragment>\n                    {fetched.length > 0 && renderDeleteButton}\n                </React.Fragment>\n            }\n        </React.Fragment>\n    );\n\n    return (\n        <Layout>\n            <ActionsBar\n                title={useTranslation(\"Manage User Meta\")}\n                actions={buttons}\n            />\n            <main className=\"\">\n                <Breadcrumbs crumbs={[\n                    {\n                        label: useTranslation(\"Registered Custom Post Types\"),\n                        link: \"/\"\n                    },\n                    {\n                        label: useTranslation(\"Manage User Meta\")\n                    }\n                ]} />\n                {Prompt}\n                <Meta\n                    id={`user_meta`}\n                    belongsTo={metaTypes.USER}\n                    boxes={boxes}\n                    fields={fields}\n                    blocks={blocks}\n                    onSortEnd={onSortEnd}\n                    values={values}\n                />\n            </main>\n        </Layout>\n    );\n};\n\nexport default UserMeta;"],"names":["UserMeta","dispatch","state","metaStateReducer","boxes","fields","values","blocks","isSaved","isValid","saveLoading","loading","saveErrors","errors","success","fetchMetaReducer","fetched","didMountRef","Prompt","setDirty","setPristine","modalVisible","setModalVisible","metaTypes","USER","onSortEnd","oldIndex","newIndex","handleSubmit","handleDeleteAll","setUserMetaStatusSaved","current","toast","length","map","error","renderDeleteButton","e","preventDefault","buttons","label","link"],"sourceRoot":""}