{"version":3,"file":"8221.js","mappings":"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","sources":["webpack://advanced-custom-post-type/./assets/src/App/components/pages/TaxonomyMeta/index.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {useParams} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport useUnsavedChangesWarning from \"../../../hooks/useUnsavedChangesWarning\";\nimport {metaTitle} from \"../../../utils/misc\";\nimport {fetchMeta} from \"../../../redux/thunks/fetchMeta\";\nimport {metaTypes} from \"../../../constants/metaTypes\";\nimport {createBox, setBoxes, setStatusSaved} from \"../../../redux/actions/metaStateActions\";\nimport {arrayMove} from \"react-sortable-hoc\";\nimport {metaSubmit} from \"../../../redux/thunks/metaSubmit\";\nimport {deleteAllMeta} from \"../../../redux/thunks/deleteAllMeta\";\nimport {toast} from \"react-toastify\";\nimport Spinner from \"../../reusable/Loader/Spinner\";\nimport Layout from \"../../reusable/Layout\";\nimport ActionsBar from \"../../reusable/Layout/ActionsBar\";\nimport Breadcrumbs from \"../../reusable/Layout/Breadcrumbs\";\nimport Meta from \"../../reusable/Meta\";\nimport Modal from \"../../reusable/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\n\nconst TaxonomyMeta = () => {\n\n    // manage global state\n    const { taxonomy } = useParams();\n    const dispatch = useDispatch();\n    const {boxes, fields, values, blocks, isSaved, isValid, loading: saveLoading, errors: saveErrors, success} = useSelector(state => state.metaStateReducer);\n    const {loading, fetched} = useSelector(state => state.fetchMetaReducer);\n\n    // manage local state\n    const didMountRef = useRef(false);\n    const [Prompt, setDirty, setPristine] = useUnsavedChangesWarning();\n    const [modalVisible, setModalVisible] = useState(false);\n\n    // set page meta title\n    useEffect(() => {\n        metaTitle(`${useTranslation(\"Taxonomy meta\")}${isSaved ? '' : '*'}`);\n        if(!isSaved){ setDirty(); }\n    }, [isSaved]);\n\n    // fetching data and\n    // populate the UI\n    useEffect(() => {\n        dispatch(fetchMeta(metaTypes.TAXONOMY, taxonomy));\n    }, [saveLoading]);\n\n    // sortable\n    const onSortEnd = ({oldIndex, newIndex}) => {\n        dispatch(setBoxes(arrayMove(boxes, oldIndex, newIndex)));\n    };\n\n    // handle data submit\n    const handleSubmit = () => {\n        dispatch(metaSubmit(values));\n        dispatch(setStatusSaved());\n        setPristine();\n    };\n\n    const handleDeleteAll = () => {\n        dispatch(deleteAllMeta(metaTypes.TAXONOMY, taxonomy));\n        dispatch(setStatusSaved());\n        setPristine();\n    };\n\n    // handle form submission outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!saveLoading){\n                if(success){\n                    setPristine();\n                    toast.success(useTranslation(\"Taxonomy meta successfully saved\"));\n                }\n\n                if(saveErrors.length > 0){\n                    saveErrors.map((error) => {\n                        toast.error(error);\n                    });\n                }\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [saveLoading]);\n\n    if(loading){\n        return <Spinner />;\n    }\n\n    const renderDeleteButton = (\n        <React.Fragment>\n            <Modal title={useTranslation(\"Confirm deleting all\")} visible={modalVisible}>\n                <p>Are you sure?</p>\n                <p>\n                    <a\n                        href=\"#\"\n                        className=\"acpt-btn acpt-btn-primary\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            setModalVisible(!modalVisible);\n                            handleDeleteAll();\n                        }}\n                    >\n                        {useTranslation(\"Yes\")}\n                    </a>\n                    &nbsp;\n                    <a\n                        href=\"#\"\n                        className=\"acpt-btn acpt-btn-primary-o\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            setModalVisible(!modalVisible);\n                        }}\n                    >\n                            {useTranslation(\"No\")}\n                    </a>\n                </p>\n            </Modal>\n            <button\n                onClick={(e) => {\n                    e.preventDefault();\n                    setModalVisible(true);\n                }}\n                type=\"submit\"\n                className=\"acpt-btn acpt-btn-danger\"\n            >\n                {useTranslation(\"Delete all\")}\n            </button>\n        </React.Fragment>\n    );\n\n    const buttons =\n        <React.Fragment>\n            <a\n                href=\"#\"\n                onClick={ (e) => {\n                    e.preventDefault();\n                    dispatch(createBox(metaTypes.TAXONOMY, taxonomy));\n                } }\n                className=\"acpt-btn acpt-btn-primary-o\"\n            >\n                {useTranslation(\"Add meta box\")}\n            </a>\n            {boxes.length > 0\n                ? (\n                    <React.Fragment>\n                        <button\n                            disabled={!isValid}\n                            onClick={(e) => {\n                                e.preventDefault();\n                                handleSubmit();\n                            }}\n                            type=\"submit\"\n                            className=\"acpt-btn acpt-btn-primary\"\n                        >\n                            {useTranslation(\"Save\")}\n                        </button>\n                        {renderDeleteButton}\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        {fetched.length > 0 && renderDeleteButton}\n                    </React.Fragment>\n                )}\n        </React.Fragment>\n    ;\n\n    return(\n        <Layout>\n            <ActionsBar\n                title={`${taxonomy}: ${useTranslation(\"Manage meta fields\")}`}\n                actions={buttons}\n            />\n            <main className=\"\">\n                <Breadcrumbs crumbs={[\n                    {\n                        label: useTranslation(\"Registered Taxonomies\"),\n                        link: \"/taxonomies\"\n                    },\n                    {\n                        label: useTranslation(\"Manage meta fields\")\n                    }\n                ]} />\n                {Prompt}\n                <Meta\n                    id={`tax_${taxonomy}_meta`}\n                    belongsTo={metaTypes.TAXONOMY}\n                    find={taxonomy}\n                    boxes={boxes}\n                    fields={fields}\n                    blocks={blocks}\n                    onSortEnd={onSortEnd}\n                    values={values}\n                />\n            </main>\n        </Layout>\n    )\n};\n\nexport default TaxonomyMeta;"],"names":["TaxonomyMeta","taxonomy","dispatch","state","metaStateReducer","boxes","fields","values","blocks","isSaved","isValid","saveLoading","loading","saveErrors","errors","success","fetchMetaReducer","fetched","didMountRef","Prompt","setDirty","setPristine","modalVisible","setModalVisible","metaTypes","TAXONOMY","onSortEnd","oldIndex","newIndex","handleSubmit","handleDeleteAll","current","toast","length","map","error","renderDeleteButton","e","preventDefault","buttons","label","link"],"sourceRoot":""}