{"version":3,"file":"5604.js","mappings":"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","sources":["webpack://advanced-custom-post-type/./assets/src/App/components/pages/CustomPostTypeMeta/index.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {useParams} from \"react-router-dom\";\nimport {arrayMove} from 'react-sortable-hoc';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {createBox, setBoxes, setStatusSaved} from \"../../../redux/actions/metaStateActions\";\nimport useUnsavedChangesWarning from \"../../../hooks/useUnsavedChangesWarning\";\nimport {metaTitle} from \"../../../utils/misc\";\nimport {fetchMeta} from \"../../../redux/thunks/fetchMeta\";\nimport Spinner from \"../../reusable/Loader/Spinner\";\nimport Breadcrumbs from \"../../reusable/Layout/Breadcrumbs\";\nimport {metaSubmit} from \"../../../redux/thunks/metaSubmit\";\nimport {toast} from \"react-toastify\";\nimport {deleteAllMeta} from \"../../../redux/thunks/deleteAllMeta\";\nimport Layout from \"../../reusable/Layout\";\nimport ActionsBar from \"../../reusable/Layout/ActionsBar\";\nimport {metaTypes} from \"../../../constants/metaTypes\";\nimport Meta from \"../../reusable/Meta\";\nimport Modal from \"../../reusable/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\n\nconst CustomPostTypeMeta = () => {\n\n    // manage global state\n    const { postType } = useParams();\n    const dispatch = useDispatch();\n    const {boxes, fields, values, blocks, isSaved, isValid, loading: saveLoading, errors: saveErrors, success} = useSelector(state => state.metaStateReducer);\n    const {loading, fetched} = useSelector(state => state.fetchMetaReducer);\n\n    // manage local state\n    const didMountRef = useRef(false);\n    const [Prompt, setDirty, setPristine] = useUnsavedChangesWarning();\n    const [modalVisible, setModalVisible] = useState(false);\n\n    // set page meta title\n    useEffect(() => {\n        metaTitle(`ACPT - ${useTranslation(\"meta\")}${isSaved ? '' : '*'}`);\n        if(!isSaved){ setDirty(); }\n    }, [isSaved]);\n\n    // fetching data and\n    // populate the UI\n    useEffect(() => {\n        dispatch(fetchMeta(metaTypes.CUSTOM_POST_TYPE, postType));\n    }, [saveLoading]);\n\n    // sortable\n    const onSortEnd = ({oldIndex, newIndex}) => {\n        dispatch(setBoxes(arrayMove(boxes, oldIndex, newIndex)));\n    };\n\n    // handle data submit\n    const handleSubmit = () => {\n        dispatch(metaSubmit(values));\n        dispatch(setStatusSaved());\n        setPristine();\n    };\n\n    const handleDeleteAll = () => {\n        dispatch(deleteAllMeta(metaTypes.CUSTOM_POST_TYPE, postType));\n        dispatch(setStatusSaved());\n        setPristine();\n    };\n\n    // handle form submission outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!saveLoading){\n                if(success){\n                    setPristine();\n                    toast.success(useTranslation(\"Custom post type meta successfully saved\"));\n                }\n\n                if(saveErrors.length > 0){\n                    saveErrors.map((error) => {\n                        toast.error(error);\n                    });\n                }\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [saveLoading]);\n\n    if(loading){\n        return <Spinner />;\n    }\n\n    const renderDeleteButton = (\n        <React.Fragment>\n            <Modal title={`Confirm deleting all`} visible={modalVisible}>\n                <p>{useTranslation(\"Are you sure?\")}</p>\n                <p>\n                    <a\n                        href=\"#\"\n                        className=\"acpt-btn acpt-btn-primary\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            setModalVisible(!modalVisible);\n                            handleDeleteAll();\n                        }}\n                    >\n                        {useTranslation(\"Yes\")}\n                    </a>\n                    &nbsp;\n                    <a\n                        href=\"#\"\n                        className=\"acpt-btn acpt-btn-primary-o\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            setModalVisible(!modalVisible);\n                        }}\n                    >\n                        {useTranslation(\"No\")}\n                    </a>\n                </p>\n            </Modal>\n            <button\n                onClick={(e) => {\n                    e.preventDefault();\n                    setModalVisible(true);\n                }}\n                type=\"submit\"\n                className=\"acpt-btn acpt-btn-danger\"\n            >\n                {useTranslation(\"Delete all\")}\n            </button>\n        </React.Fragment>\n    );\n\n    const buttons =\n        <React.Fragment>\n            <a\n                href=\"#\"\n                onClick={ (e) => {\n                    e.preventDefault();\n                    dispatch(createBox(metaTypes.CUSTOM_POST_TYPE, postType));\n                } }\n                className=\"acpt-btn acpt-btn-primary-o\"\n            >\n                {useTranslation(\"Add meta box\")}\n            </a>\n            {boxes.length > 0\n                ? (\n                   <React.Fragment>\n                       <button\n                           disabled={!isValid}\n                           onClick={(e) => {\n                               e.preventDefault();\n                               handleSubmit();\n                           }}\n                           type=\"submit\"\n                           className=\"acpt-btn acpt-btn-primary\"\n                       >\n                           {useTranslation(\"Save\")}\n                       </button>\n                       {renderDeleteButton}\n                   </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        {fetched.length > 0 && renderDeleteButton}\n                    </React.Fragment>\n                )}\n        </React.Fragment>\n    ;\n\n    return(\n        <Layout>\n            <ActionsBar\n                title={`${postType} ${useTranslation(\"Manage meta fields\")}`}\n                actions={buttons}\n            />\n            <main className=\"\">\n                <Breadcrumbs crumbs={[\n                    {\n                        label: useTranslation(\"Registered Custom Post Types\"),\n                        link: \"/\"\n                    },\n                    {\n                        label: useTranslation(\"Manage meta fields\")\n                    }\n                ]} />\n                {Prompt}\n                <Meta\n                    id={`cpt_${postType}_meta`}\n                    belongsTo={metaTypes.CUSTOM_POST_TYPE}\n                    find={postType}\n                    boxes={boxes}\n                    fields={fields}\n                    blocks={blocks}\n                    onSortEnd={onSortEnd}\n                    values={values}\n                />\n            </main>\n        </Layout>\n    )\n};\n\nexport default CustomPostTypeMeta;"],"names":["CustomPostTypeMeta","postType","dispatch","state","metaStateReducer","boxes","fields","values","blocks","isSaved","isValid","saveLoading","loading","saveErrors","errors","success","fetchMetaReducer","fetched","didMountRef","Prompt","setDirty","setPristine","modalVisible","setModalVisible","metaTypes","CUSTOM_POST_TYPE","onSortEnd","oldIndex","newIndex","handleSubmit","handleDeleteAll","current","toast","length","map","error","renderDeleteButton","e","preventDefault","buttons","label","link"],"sourceRoot":""}